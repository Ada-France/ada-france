-----------------------------------------------------------------------
--  Adafr.Members.Models -- Adafr.Members.Models
-----------------------------------------------------------------------
--  File generated by Dynamo DO NOT MODIFY
--  Template used: templates/model/package-body.xhtml
--  Ada Generator: https://github.com/stcarrez/dynamo Version 1.4.0
-----------------------------------------------------------------------
--  Copyright (C) 2023 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
pragma Warnings (Off);
with Ada.Unchecked_Deallocation;
with Util.Beans.Objects.Time;
with ASF.Events.Faces.Actions;
pragma Warnings (On);
package body Adafr.Members.Models is

   pragma Style_Checks ("-mrIu");
   pragma Warnings (Off, "formal parameter * is not referenced");
   pragma Warnings (Off, "use clause for type *");
   pragma Warnings (Off, "use clause for private type *");

   use type ADO.Objects.Object_Record_Access;
   use type ADO.Objects.Object_Ref;

   function Receipt_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => RECEIPT_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Receipt_Key;

   function Receipt_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => RECEIPT_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Receipt_Key;

   function "=" (Left, Right : Receipt_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Receipt_Ref'Class;
                        Impl   : out Receipt_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Receipt_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Receipt_Ref) is
      Impl : Receipt_Access;
   begin
      Impl := new Receipt_Impl;
      Impl.Create_Date := ADO.DEFAULT_TIME;
      Impl.Amount := 0;
      Impl.Member := ADO.NO_IDENTIFIER;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Receipt
   -- ----------------------------------------

   procedure Set_Id (Object : in out Receipt_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Receipt_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Receipt_Ref)
                  return ADO.Identifier is
      Impl : constant Receipt_Access
         := Receipt_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   procedure Set_Create_Date (Object : in out Receipt_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Receipt_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 2, Impl.Create_Date, Value);
   end Set_Create_Date;

   function Get_Create_Date (Object : in Receipt_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Receipt_Access
         := Receipt_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Create_Date;
   end Get_Create_Date;


   procedure Set_Amount (Object : in out Receipt_Ref;
                         Value  : in Integer) is
      Impl : Receipt_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Integer (Impl.all, 3, Impl.Amount, Value);
   end Set_Amount;

   function Get_Amount (Object : in Receipt_Ref)
                  return Integer is
      Impl : constant Receipt_Access
         := Receipt_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Amount;
   end Get_Amount;


   procedure Set_Member (Object : in out Receipt_Ref;
                         Value  : in ADO.Identifier) is
      Impl : Receipt_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Identifier (Impl.all, 4, Impl.Member, Value);
   end Set_Member;

   function Get_Member (Object : in Receipt_Ref)
                  return ADO.Identifier is
      Impl : constant Receipt_Access
         := Receipt_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Member;
   end Get_Member;

   --  Copy of the object.
   procedure Copy (Object : in Receipt_Ref;
                   Into   : in out Receipt_Ref) is
      Result : Receipt_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Receipt_Access
              := Receipt_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Receipt_Access
              := new Receipt_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.all.Set_Key (Impl.all.Get_Key);
            Copy.Create_Date := Impl.Create_Date;
            Copy.Amount := Impl.Amount;
            Copy.Member := Impl.Member;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out Receipt_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Receipt_Access := new Receipt_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Receipt_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Receipt_Access := new Receipt_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Receipt_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Receipt_Access := new Receipt_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Receipt_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Receipt_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out Receipt_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access Receipt_Impl) is
      type Receipt_Impl_Ptr is access all Receipt_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Receipt_Impl, Receipt_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Receipt_Impl_Ptr := Receipt_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out Receipt_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, RECEIPT_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Receipt_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Receipt_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (RECEIPT_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_1_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (2) then
         Stmt.Save_Field (Name  => COL_1_1_NAME, --  create_date
                          Value => Object.Create_Date);
         Object.Clear_Modified (2);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_1_NAME, --  amount
                          Value => Object.Amount);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_1_NAME, --  member
                          Value => Object.Member);
         Object.Clear_Modified (4);
      end if;
      if Stmt.Has_Save_Fields then
         Stmt.Set_Filter (Filter => "id = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               end if;
            end if;
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out Receipt_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (RECEIPT_DEF'Access);
      Result : Integer;
   begin
      Query.Save_Field (Name  => COL_0_1_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_1_NAME, --  create_date
                        Value => Object.Create_Date);
      Query.Save_Field (Name  => COL_2_1_NAME, --  amount
                        Value => Object.Amount);
      Query.Save_Field (Name  => COL_3_1_NAME, --  member
                        Value => Object.Member);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   overriding
   procedure Delete (Object  : in out Receipt_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (RECEIPT_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Receipt_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Receipt_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Receipt_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Create_Date);
      elsif Name = "amount" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Amount));
      elsif Name = "member" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Member));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Receipt_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Create_Date := Stmt.Get_Time (1);
      Object.Amount := Stmt.Get_Integer (2);
      Object.Member := Stmt.Get_Identifier (3);
      ADO.Objects.Set_Created (Object);
   end Load;
   function Member_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => MEMBER_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Member_Key;

   function Member_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => MEMBER_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Member_Key;

   function "=" (Left, Right : Member_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Member_Ref'Class;
                        Impl   : out Member_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Member_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Member_Ref) is
      Impl : Member_Access;
   begin
      Impl := new Member_Impl;
      Impl.Version := 0;
      Impl.Create_Date := ADO.DEFAULT_TIME;
      Impl.Mail_Verify_Date.Is_Null := True;
      Impl.Payment_Date.Is_Null := True;
      Impl.Status := Status_Type'First;
      Impl.Ada_Europe := False;
      Impl.Update_Date := ADO.DEFAULT_TIME;
      Impl.Subscription_Deadline.Is_Null := True;
      Impl.Amount := 0;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Member
   -- ----------------------------------------

   procedure Set_Id (Object : in out Member_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Member_Ref)
                  return ADO.Identifier is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   function Get_Version (Object : in Member_Ref)
                  return Integer is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_First_Name (Object : in out Member_Ref;
                              Value : in String) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_String (Impl.all, 3, Impl.First_Name, Value);
   end Set_First_Name;

   procedure Set_First_Name (Object : in out Member_Ref;
                             Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Unbounded_String (Impl.all, 3, Impl.First_Name, Value);
   end Set_First_Name;

   function Get_First_Name (Object : in Member_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_First_Name);
   end Get_First_Name;
   function Get_First_Name (Object : in Member_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.First_Name;
   end Get_First_Name;


   procedure Set_Last_Name (Object : in out Member_Ref;
                             Value : in String) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_String (Impl.all, 4, Impl.Last_Name, Value);
   end Set_Last_Name;

   procedure Set_Last_Name (Object : in out Member_Ref;
                            Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Unbounded_String (Impl.all, 4, Impl.Last_Name, Value);
   end Set_Last_Name;

   function Get_Last_Name (Object : in Member_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Last_Name);
   end Get_Last_Name;
   function Get_Last_Name (Object : in Member_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Last_Name;
   end Get_Last_Name;


   procedure Set_Company (Object : in out Member_Ref;
                           Value : in String) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_String (Impl.all, 5, Impl.Company, Value);
   end Set_Company;

   procedure Set_Company (Object : in out Member_Ref;
                          Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Unbounded_String (Impl.all, 5, Impl.Company, Value);
   end Set_Company;

   function Get_Company (Object : in Member_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Company);
   end Get_Company;
   function Get_Company (Object : in Member_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Company;
   end Get_Company;


   procedure Set_Address1 (Object : in out Member_Ref;
                            Value : in String) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_String (Impl.all, 6, Impl.Address1, Value);
   end Set_Address1;

   procedure Set_Address1 (Object : in out Member_Ref;
                           Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Unbounded_String (Impl.all, 6, Impl.Address1, Value);
   end Set_Address1;

   function Get_Address1 (Object : in Member_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Address1);
   end Get_Address1;
   function Get_Address1 (Object : in Member_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Address1;
   end Get_Address1;


   procedure Set_Address2 (Object : in out Member_Ref;
                            Value : in String) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_String (Impl.all, 7, Impl.Address2, Value);
   end Set_Address2;

   procedure Set_Address2 (Object : in out Member_Ref;
                           Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Unbounded_String (Impl.all, 7, Impl.Address2, Value);
   end Set_Address2;

   function Get_Address2 (Object : in Member_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Address2);
   end Get_Address2;
   function Get_Address2 (Object : in Member_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Address2;
   end Get_Address2;


   procedure Set_Address3 (Object : in out Member_Ref;
                            Value : in String) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_String (Impl.all, 8, Impl.Address3, Value);
   end Set_Address3;

   procedure Set_Address3 (Object : in out Member_Ref;
                           Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Unbounded_String (Impl.all, 8, Impl.Address3, Value);
   end Set_Address3;

   function Get_Address3 (Object : in Member_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Address3);
   end Get_Address3;
   function Get_Address3 (Object : in Member_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Address3;
   end Get_Address3;


   procedure Set_Postal_Code (Object : in out Member_Ref;
                               Value : in String) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_String (Impl.all, 9, Impl.Postal_Code, Value);
   end Set_Postal_Code;

   procedure Set_Postal_Code (Object : in out Member_Ref;
                              Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Unbounded_String (Impl.all, 9, Impl.Postal_Code, Value);
   end Set_Postal_Code;

   function Get_Postal_Code (Object : in Member_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Postal_Code);
   end Get_Postal_Code;
   function Get_Postal_Code (Object : in Member_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Postal_Code;
   end Get_Postal_Code;


   procedure Set_City (Object : in out Member_Ref;
                        Value : in String) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_String (Impl.all, 10, Impl.City, Value);
   end Set_City;

   procedure Set_City (Object : in out Member_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Unbounded_String (Impl.all, 10, Impl.City, Value);
   end Set_City;

   function Get_City (Object : in Member_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_City);
   end Get_City;
   function Get_City (Object : in Member_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.City;
   end Get_City;


   procedure Set_Country (Object : in out Member_Ref;
                           Value : in String) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_String (Impl.all, 11, Impl.Country, Value);
   end Set_Country;

   procedure Set_Country (Object : in out Member_Ref;
                          Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Unbounded_String (Impl.all, 11, Impl.Country, Value);
   end Set_Country;

   function Get_Country (Object : in Member_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Country);
   end Get_Country;
   function Get_Country (Object : in Member_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Country;
   end Get_Country;


   procedure Set_Create_Date (Object : in out Member_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 12, Impl.Create_Date, Value);
   end Set_Create_Date;

   function Get_Create_Date (Object : in Member_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Create_Date;
   end Get_Create_Date;


   procedure Set_Mail_Verify_Date (Object : in out Member_Ref;
                                   Value  : in ADO.Nullable_Time) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Time (Impl.all, 13, Impl.Mail_Verify_Date, Value);
   end Set_Mail_Verify_Date;

   function Get_Mail_Verify_Date (Object : in Member_Ref)
                  return ADO.Nullable_Time is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Mail_Verify_Date;
   end Get_Mail_Verify_Date;


   procedure Set_Payment_Date (Object : in out Member_Ref;
                               Value  : in ADO.Nullable_Time) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Time (Impl.all, 14, Impl.Payment_Date, Value);
   end Set_Payment_Date;

   function Get_Payment_Date (Object : in Member_Ref)
                  return ADO.Nullable_Time is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Payment_Date;
   end Get_Payment_Date;


   procedure Set_Status (Object : in out Member_Ref;
                         Value  : in Status_Type) is
      procedure Set_Field_Discrete is
        new ADO.Audits.Set_Field_Operation
          (Status_Type,
           Status_Type_Objects.To_Object);
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      Set_Field_Discrete (Impl.all, 15, Impl.Status, Value);
   end Set_Status;

   function Get_Status (Object : in Member_Ref)
                  return Status_Type is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Status;
   end Get_Status;


   procedure Set_Ada_Europe (Object : in out Member_Ref;
                             Value  : in Boolean) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Boolean (Impl.all, 16, Impl.Ada_Europe, Value);
   end Set_Ada_Europe;

   function Get_Ada_Europe (Object : in Member_Ref)
                  return Boolean is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Ada_Europe;
   end Get_Ada_Europe;


   procedure Set_Salt (Object : in out Member_Ref;
                        Value : in String) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 17, Impl.Salt, Value);
   end Set_Salt;

   procedure Set_Salt (Object : in out Member_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 17, Impl.Salt, Value);
   end Set_Salt;

   function Get_Salt (Object : in Member_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Salt);
   end Get_Salt;
   function Get_Salt (Object : in Member_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Salt;
   end Get_Salt;


   procedure Set_Update_Date (Object : in out Member_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 18, Impl.Update_Date, Value);
   end Set_Update_Date;

   function Get_Update_Date (Object : in Member_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Update_Date;
   end Get_Update_Date;


   procedure Set_Subscription_Deadline (Object : in out Member_Ref;
                                        Value  : in ADO.Nullable_Time) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 19, Impl.Subscription_Deadline, Value);
   end Set_Subscription_Deadline;

   function Get_Subscription_Deadline (Object : in Member_Ref)
                  return ADO.Nullable_Time is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Subscription_Deadline;
   end Get_Subscription_Deadline;


   procedure Set_Amount (Object : in out Member_Ref;
                         Value  : in Integer) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Audits.Set_Field_Integer (Impl.all, 20, Impl.Amount, Value);
   end Set_Amount;

   function Get_Amount (Object : in Member_Ref)
                  return Integer is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Amount;
   end Get_Amount;


   procedure Set_Receipt (Object : in out Member_Ref;
                          Value  : in Receipt_Ref'Class) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 21, Impl.Receipt, Value);
   end Set_Receipt;

   function Get_Receipt (Object : in Member_Ref)
                  return Receipt_Ref'Class is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Receipt;
   end Get_Receipt;


   procedure Set_Email (Object : in out Member_Ref;
                        Value  : in AWA.Users.Models.Email_Ref'Class) is
      Impl : Member_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 22, Impl.Email, Value);
   end Set_Email;

   function Get_Email (Object : in Member_Ref)
                  return AWA.Users.Models.Email_Ref'Class is
      Impl : constant Member_Access
         := Member_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Email;
   end Get_Email;

   --  Copy of the object.
   procedure Copy (Object : in Member_Ref;
                   Into   : in out Member_Ref) is
      Result : Member_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Member_Access
              := Member_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Member_Access
              := new Member_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Version := Impl.Version;
            Copy.First_Name := Impl.First_Name;
            Copy.Last_Name := Impl.Last_Name;
            Copy.Company := Impl.Company;
            Copy.Address1 := Impl.Address1;
            Copy.Address2 := Impl.Address2;
            Copy.Address3 := Impl.Address3;
            Copy.Postal_Code := Impl.Postal_Code;
            Copy.City := Impl.City;
            Copy.Country := Impl.Country;
            Copy.Create_Date := Impl.Create_Date;
            Copy.Mail_Verify_Date := Impl.Mail_Verify_Date;
            Copy.Payment_Date := Impl.Payment_Date;
            Copy.Status := Impl.Status;
            Copy.Ada_Europe := Impl.Ada_Europe;
            Copy.Salt := Impl.Salt;
            Copy.Update_Date := Impl.Update_Date;
            Copy.Subscription_Deadline := Impl.Subscription_Deadline;
            Copy.Amount := Impl.Amount;
            Copy.Receipt := Impl.Receipt;
            Copy.Email := Impl.Email;
         end;
      end if;
      Into := Result;
   end Copy;

   overriding
   procedure Find (Object  : in out Member_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Member_Access := new Member_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Member_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Member_Access := new Member_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Member_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Member_Access := new Member_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Reload (Object  : in out Member_Ref;
                     Session : in out ADO.Sessions.Session'Class;
                     Updated : out Boolean) is
      Result : ADO.Objects.Object_Record_Access;
      Impl   : Member_Access;
      Query  : ADO.SQL.Query;
      Id     : ADO.Identifier;
   begin
      if Object.Is_Null then
         raise ADO.Objects.NULL_ERROR;
      end if;
      Object.Prepare_Modify (Result);
      Impl := Member_Impl (Result.all)'Access;
      Id := ADO.Objects.Get_Key_Value (Impl.all);
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Bind_Param (Position => 2, Value => Impl.Version);
      Query.Set_Filter ("id = ? AND version != ?");
      declare
         Stmt : ADO.Statements.Query_Statement
             := Session.Create_Statement (Query, MEMBER_DEF'Access);
      begin
         Stmt.Execute;
         if Stmt.Has_Elements then
            Updated := True;
            Impl.Load (Stmt, Session);
         else
            Updated := False;
         end if;
      end;
   end Reload;

   overriding
   procedure Save (Object  : in out Member_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Member_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   overriding
   procedure Delete (Object  : in out Member_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   overriding
   procedure Destroy (Object : access Member_Impl) is
      type Member_Impl_Ptr is access all Member_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Member_Impl, Member_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Member_Impl_Ptr := Member_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   overriding
   procedure Find (Object  : in out Member_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, MEMBER_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Member_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   overriding
   procedure Save (Object  : in out Member_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (MEMBER_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_2_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_2_NAME, --  first_name
                          Value => Object.First_Name);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_2_NAME, --  last_name
                          Value => Object.Last_Name);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_2_NAME, --  company
                          Value => Object.Company);
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_2_NAME, --  address1
                          Value => Object.Address1);
         Object.Clear_Modified (6);
      end if;
      if Object.Is_Modified (7) then
         Stmt.Save_Field (Name  => COL_6_2_NAME, --  address2
                          Value => Object.Address2);
         Object.Clear_Modified (7);
      end if;
      if Object.Is_Modified (8) then
         Stmt.Save_Field (Name  => COL_7_2_NAME, --  address3
                          Value => Object.Address3);
         Object.Clear_Modified (8);
      end if;
      if Object.Is_Modified (9) then
         Stmt.Save_Field (Name  => COL_8_2_NAME, --  postal_code
                          Value => Object.Postal_Code);
         Object.Clear_Modified (9);
      end if;
      if Object.Is_Modified (10) then
         Stmt.Save_Field (Name  => COL_9_2_NAME, --  city
                          Value => Object.City);
         Object.Clear_Modified (10);
      end if;
      if Object.Is_Modified (11) then
         Stmt.Save_Field (Name  => COL_10_2_NAME, --  country
                          Value => Object.Country);
         Object.Clear_Modified (11);
      end if;
      if Object.Is_Modified (12) then
         Stmt.Save_Field (Name  => COL_11_2_NAME, --  create_date
                          Value => Object.Create_Date);
         Object.Clear_Modified (12);
      end if;
      if Object.Is_Modified (13) then
         Stmt.Save_Field (Name  => COL_12_2_NAME, --  mail_verify_date
                          Value => Object.Mail_Verify_Date);
         Object.Clear_Modified (13);
      end if;
      if Object.Is_Modified (14) then
         Stmt.Save_Field (Name  => COL_13_2_NAME, --  payment_date
                          Value => Object.Payment_Date);
         Object.Clear_Modified (14);
      end if;
      if Object.Is_Modified (15) then
         Stmt.Save_Field (Name  => COL_14_2_NAME, --  status
                          Value => Integer (Status_Type'Enum_Rep (Object.Status)));
         Object.Clear_Modified (15);
      end if;
      if Object.Is_Modified (16) then
         Stmt.Save_Field (Name  => COL_15_2_NAME, --  ada_europe
                          Value => Object.Ada_Europe);
         Object.Clear_Modified (16);
      end if;
      if Object.Is_Modified (17) then
         Stmt.Save_Field (Name  => COL_16_2_NAME, --  salt
                          Value => Object.Salt);
         Object.Clear_Modified (17);
      end if;
      if Object.Is_Modified (18) then
         Stmt.Save_Field (Name  => COL_17_2_NAME, --  update_date
                          Value => Object.Update_Date);
         Object.Clear_Modified (18);
      end if;
      if Object.Is_Modified (19) then
         Stmt.Save_Field (Name  => COL_18_2_NAME, --  subscription_deadline
                          Value => Object.Subscription_Deadline);
         Object.Clear_Modified (19);
      end if;
      if Object.Is_Modified (20) then
         Stmt.Save_Field (Name  => COL_19_2_NAME, --  amount
                          Value => Object.Amount);
         Object.Clear_Modified (20);
      end if;
      if Object.Is_Modified (21) then
         Stmt.Save_Field (Name  => COL_20_2_NAME, --  receipt_id
                          Value => Object.Receipt);
         Object.Clear_Modified (21);
      end if;
      if Object.Is_Modified (22) then
         Stmt.Save_Field (Name  => COL_21_2_NAME, --  email_id
                          Value => Object.Email);
         Object.Clear_Modified (22);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
            ADO.Audits.Save (Object, Session);
         end;
      end if;
   end Save;

   overriding
   procedure Create (Object  : in out Member_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (MEMBER_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_2_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_2_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_2_2_NAME, --  first_name
                        Value => Object.First_Name);
      Query.Save_Field (Name  => COL_3_2_NAME, --  last_name
                        Value => Object.Last_Name);
      Query.Save_Field (Name  => COL_4_2_NAME, --  company
                        Value => Object.Company);
      Query.Save_Field (Name  => COL_5_2_NAME, --  address1
                        Value => Object.Address1);
      Query.Save_Field (Name  => COL_6_2_NAME, --  address2
                        Value => Object.Address2);
      Query.Save_Field (Name  => COL_7_2_NAME, --  address3
                        Value => Object.Address3);
      Query.Save_Field (Name  => COL_8_2_NAME, --  postal_code
                        Value => Object.Postal_Code);
      Query.Save_Field (Name  => COL_9_2_NAME, --  city
                        Value => Object.City);
      Query.Save_Field (Name  => COL_10_2_NAME, --  country
                        Value => Object.Country);
      Query.Save_Field (Name  => COL_11_2_NAME, --  create_date
                        Value => Object.Create_Date);
      Query.Save_Field (Name  => COL_12_2_NAME, --  mail_verify_date
                        Value => Object.Mail_Verify_Date);
      Query.Save_Field (Name  => COL_13_2_NAME, --  payment_date
                        Value => Object.Payment_Date);
      Query.Save_Field (Name  => COL_14_2_NAME, --  status
                        Value => Integer (Status_Type'Enum_Rep (Object.Status)));
      Query.Save_Field (Name  => COL_15_2_NAME, --  ada_europe
                        Value => Object.Ada_Europe);
      Query.Save_Field (Name  => COL_16_2_NAME, --  salt
                        Value => Object.Salt);
      Query.Save_Field (Name  => COL_17_2_NAME, --  update_date
                        Value => Object.Update_Date);
      Query.Save_Field (Name  => COL_18_2_NAME, --  subscription_deadline
                        Value => Object.Subscription_Deadline);
      Query.Save_Field (Name  => COL_19_2_NAME, --  amount
                        Value => Object.Amount);
      Query.Save_Field (Name  => COL_20_2_NAME, --  receipt_id
                        Value => Object.Receipt);
      Query.Save_Field (Name  => COL_21_2_NAME, --  email_id
                        Value => Object.Email);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
      ADO.Audits.Save (Object, Session);
   end Create;

   overriding
   procedure Delete (Object  : in out Member_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (MEMBER_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Member_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Member_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Member_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "first_name" then
         return Util.Beans.Objects.To_Object (Impl.First_Name);
      elsif Name = "last_name" then
         return Util.Beans.Objects.To_Object (Impl.Last_Name);
      elsif Name = "company" then
         return Util.Beans.Objects.To_Object (Impl.Company);
      elsif Name = "address1" then
         return Util.Beans.Objects.To_Object (Impl.Address1);
      elsif Name = "address2" then
         return Util.Beans.Objects.To_Object (Impl.Address2);
      elsif Name = "address3" then
         return Util.Beans.Objects.To_Object (Impl.Address3);
      elsif Name = "postal_code" then
         return Util.Beans.Objects.To_Object (Impl.Postal_Code);
      elsif Name = "city" then
         return Util.Beans.Objects.To_Object (Impl.City);
      elsif Name = "country" then
         return Util.Beans.Objects.To_Object (Impl.Country);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Create_Date);
      elsif Name = "mail_verify_date" then
         if Impl.Mail_Verify_Date.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.Time.To_Object (Impl.Mail_Verify_Date.Value);
         end if;
      elsif Name = "payment_date" then
         if Impl.Payment_Date.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.Time.To_Object (Impl.Payment_Date.Value);
         end if;
      elsif Name = "status" then
         return Status_Type_Objects.To_Object (Impl.Status);
      elsif Name = "ada_europe" then
         return Util.Beans.Objects.To_Object (Impl.Ada_Europe);
      elsif Name = "salt" then
         return Util.Beans.Objects.To_Object (Impl.Salt);
      elsif Name = "update_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Update_Date);
      elsif Name = "subscription_deadline" then
         if Impl.Subscription_Deadline.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.Time.To_Object (Impl.Subscription_Deadline.Value);
         end if;
      elsif Name = "amount" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Amount));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;



   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Member_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.First_Name := Stmt.Get_Unbounded_String (2);
      Object.Last_Name := Stmt.Get_Unbounded_String (3);
      Object.Company := Stmt.Get_Unbounded_String (4);
      Object.Address1 := Stmt.Get_Unbounded_String (5);
      Object.Address2 := Stmt.Get_Unbounded_String (6);
      Object.Address3 := Stmt.Get_Unbounded_String (7);
      Object.Postal_Code := Stmt.Get_Unbounded_String (8);
      Object.City := Stmt.Get_Unbounded_String (9);
      Object.Country := Stmt.Get_Unbounded_String (10);
      Object.Create_Date := Stmt.Get_Time (11);
      Object.Mail_Verify_Date := Stmt.Get_Nullable_Time (12);
      Object.Payment_Date := Stmt.Get_Nullable_Time (13);
      Object.Status := Status_Type'Enum_Val (Stmt.Get_Integer (14));
      Object.Ada_Europe := Stmt.Get_Boolean (15);
      Object.Salt := Stmt.Get_Unbounded_String (16);
      Object.Update_Date := Stmt.Get_Time (17);
      Object.Subscription_Deadline := Stmt.Get_Nullable_Time (18);
      Object.Amount := Stmt.Get_Integer (19);
      if not Stmt.Is_Null (20) then
         Object.Receipt.Set_Key_Value (Stmt.Get_Identifier (20), Session);
      end if;
      if not Stmt.Is_Null (21) then
         Object.Email.Set_Key_Value (Stmt.Get_Identifier (21), Session);
      end if;
      Object.Version := Stmt.Get_Integer (1);
      ADO.Objects.Set_Created (Object);
   end Load;


   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Audit_Info;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "date" then
         return Util.Beans.Objects.Time.To_Object (From.Date);
      elsif Name = "name" then
         return Util.Beans.Objects.To_Object (From.Name);
      elsif Name = "old_value" then
         if From.Old_Value.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (From.Old_Value.Value);
         end if;
      elsif Name = "new_value" then
         if From.New_Value.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (From.New_Value.Value);
         end if;
      elsif Name = "author" then
         if From.Author.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (From.Author.Value);
         end if;
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Audit_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "date" then
         Item.Date := Util.Beans.Objects.Time.To_Time (Value);
      elsif Name = "name" then
         Item.Name := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "old_value" then
         Item.Old_Value.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Old_Value.Is_Null then
            Item.Old_Value.Value := Util.Beans.Objects.To_Unbounded_String (Value);
         end if;
      elsif Name = "new_value" then
         Item.New_Value.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.New_Value.Is_Null then
            Item.New_Value.Value := Util.Beans.Objects.To_Unbounded_String (Value);
         end if;
      elsif Name = "author" then
         Item.Author.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Author.Is_Null then
            Item.Author.Value := Util.Beans.Objects.To_Unbounded_String (Value);
         end if;
      end if;
   end Set_Value;


   --  --------------------
   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   --  --------------------
   procedure List (Object  : in out Audit_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
   begin
      List (Object.List, Session, Context);
   end List;

   --  --------------------
   --  Describes the change made on the adafr_member database record.
   --  --------------------
   procedure List (Object  : in out Audit_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
      procedure Read (Into : in out Audit_Info);

      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Context);
      Pos  : Positive := 1;
      procedure Read (Into : in out Audit_Info) is
      begin
         Into.Date := Stmt.Get_Time (0);
         Into.Name := Stmt.Get_Unbounded_String (1);
         Into.Old_Value := Stmt.Get_Nullable_String (2);
         Into.New_Value := Stmt.Get_Nullable_String (3);
         Into.Author := Stmt.Get_Nullable_String (4);
      end Read;
   begin
      Stmt.Execute;
      Audit_Info_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         Object.Insert_Space (Before => Pos);
         Object.Update_Element (Index => Pos, Process => Read'Access);
         Pos := Pos + 1;
         Stmt.Next;
      end loop;
   end List;



   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Export_Member_Info;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Id));
      elsif Name = "first_name" then
         return Util.Beans.Objects.To_Object (From.First_Name);
      elsif Name = "last_name" then
         return Util.Beans.Objects.To_Object (From.Last_Name);
      elsif Name = "status" then
         return Status_Type_Objects.To_Object (From.Status);
      elsif Name = "ada_europe" then
         return Util.Beans.Objects.To_Object (From.Ada_Europe);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (From.Create_Date);
      elsif Name = "payment_date" then
         if From.Payment_Date.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.Time.To_Object (From.Payment_Date.Value);
         end if;
      elsif Name = "subscription_deadline" then
         if From.Subscription_Deadline.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.Time.To_Object (From.Subscription_Deadline.Value);
         end if;
      elsif Name = "amount" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Amount));
      elsif Name = "email" then
         return Util.Beans.Objects.To_Object (From.Email);
      elsif Name = "company" then
         return Util.Beans.Objects.To_Object (From.Company);
      elsif Name = "address1" then
         return Util.Beans.Objects.To_Object (From.Address1);
      elsif Name = "address2" then
         return Util.Beans.Objects.To_Object (From.Address2);
      elsif Name = "address3" then
         return Util.Beans.Objects.To_Object (From.Address3);
      elsif Name = "postal_code" then
         return Util.Beans.Objects.To_Object (From.Postal_Code);
      elsif Name = "city" then
         return Util.Beans.Objects.To_Object (From.City);
      elsif Name = "country" then
         return Util.Beans.Objects.To_Object (From.Country);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Export_Member_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "id" then
         Item.Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "first_name" then
         Item.First_Name := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "last_name" then
         Item.Last_Name := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "status" then
         Item.Status := Status_Type_Objects.To_Value (Value);
      elsif Name = "ada_europe" then
         Item.Ada_Europe := Util.Beans.Objects.To_Boolean (Value);
      elsif Name = "create_date" then
         Item.Create_Date := Util.Beans.Objects.Time.To_Time (Value);
      elsif Name = "payment_date" then
         Item.Payment_Date.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Payment_Date.Is_Null then
            Item.Payment_Date.Value := Util.Beans.Objects.Time.To_Time (Value);
         end if;
      elsif Name = "subscription_deadline" then
         Item.Subscription_Deadline.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Subscription_Deadline.Is_Null then
            Item.Subscription_Deadline.Value := Util.Beans.Objects.Time.To_Time (Value);
         end if;
      elsif Name = "amount" then
         Item.Amount := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "email" then
         Item.Email := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "company" then
         Item.Company := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "address1" then
         Item.Address1 := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "address2" then
         Item.Address2 := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "address3" then
         Item.Address3 := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "postal_code" then
         Item.Postal_Code := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "city" then
         Item.City := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "country" then
         Item.Country := Util.Beans.Objects.To_Unbounded_String (Value);
      end if;
   end Set_Value;


   --  --------------------
   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   --  --------------------
   procedure List (Object  : in out Export_Member_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
   begin
      List (Object.List, Session, Context);
   end List;

   --  --------------------
   --  Describes the information about an Ada-France member.
   --  --------------------
   procedure List (Object  : in out Export_Member_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
      procedure Read (Into : in out Export_Member_Info);

      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Context);
      Pos  : Positive := 1;
      procedure Read (Into : in out Export_Member_Info) is
      begin
         Into.Id := Stmt.Get_Identifier (0);
         Into.First_Name := Stmt.Get_Unbounded_String (1);
         Into.Last_Name := Stmt.Get_Unbounded_String (2);
         Into.Status := Status_Type'Enum_Val (Stmt.Get_Integer (3));
         Into.Ada_Europe := Stmt.Get_Boolean (4);
         Into.Create_Date := Stmt.Get_Time (5);
         Into.Payment_Date := Stmt.Get_Nullable_Time (6);
         Into.Subscription_Deadline := Stmt.Get_Nullable_Time (7);
         Into.Amount := Stmt.Get_Integer (8);
         Into.Email := Stmt.Get_Unbounded_String (9);
         Into.Company := Stmt.Get_Unbounded_String (10);
         Into.Address1 := Stmt.Get_Unbounded_String (11);
         Into.Address2 := Stmt.Get_Unbounded_String (12);
         Into.Address3 := Stmt.Get_Unbounded_String (13);
         Into.Postal_Code := Stmt.Get_Unbounded_String (14);
         Into.City := Stmt.Get_Unbounded_String (15);
         Into.Country := Stmt.Get_Unbounded_String (16);
      end Read;
   begin
      Stmt.Execute;
      Export_Member_Info_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         Object.Insert_Space (Before => Pos);
         Object.Update_Element (Index => Pos, Process => Read'Access);
         Pos := Pos + 1;
         Stmt.Next;
      end loop;
   end List;



   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Member_Info;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Id));
      elsif Name = "first_name" then
         if From.First_Name.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (From.First_Name.Value);
         end if;
      elsif Name = "last_name" then
         if From.Last_Name.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (From.Last_Name.Value);
         end if;
      elsif Name = "status" then
         return Status_Type_Objects.To_Object (From.Status);
      elsif Name = "ada_europe" then
         if From.Ada_Europe.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (From.Ada_Europe.Value);
         end if;
      elsif Name = "create_date" then
         if From.Create_Date.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.Time.To_Object (From.Create_Date.Value);
         end if;
      elsif Name = "payment_date" then
         if From.Payment_Date.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.Time.To_Object (From.Payment_Date.Value);
         end if;
      elsif Name = "subscription_deadline" then
         if From.Subscription_Deadline.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.Time.To_Object (From.Subscription_Deadline.Value);
         end if;
      elsif Name = "email" then
         return Util.Beans.Objects.To_Object (From.Email);
      elsif Name = "login_name" then
         if From.Login_Name.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (From.Login_Name.Value);
         end if;
      elsif Name = "role" then
         if From.Role.Is_Null then
            return Util.Beans.Objects.Null_Object;
         else
            return Util.Beans.Objects.To_Object (From.Role.Value);
         end if;
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Member_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "id" then
         Item.Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "first_name" then
         Item.First_Name.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.First_Name.Is_Null then
            Item.First_Name.Value := Util.Beans.Objects.To_Unbounded_String (Value);
         end if;
      elsif Name = "last_name" then
         Item.Last_Name.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Last_Name.Is_Null then
            Item.Last_Name.Value := Util.Beans.Objects.To_Unbounded_String (Value);
         end if;
      elsif Name = "status" then
         Item.Status := Status_Type_Objects.To_Value (Value);
      elsif Name = "ada_europe" then
         Item.Ada_Europe.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Ada_Europe.Is_Null then
            Item.Ada_Europe.Value := Util.Beans.Objects.To_Boolean (Value);
         end if;
      elsif Name = "create_date" then
         Item.Create_Date.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Create_Date.Is_Null then
            Item.Create_Date.Value := Util.Beans.Objects.Time.To_Time (Value);
         end if;
      elsif Name = "payment_date" then
         Item.Payment_Date.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Payment_Date.Is_Null then
            Item.Payment_Date.Value := Util.Beans.Objects.Time.To_Time (Value);
         end if;
      elsif Name = "subscription_deadline" then
         Item.Subscription_Deadline.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Subscription_Deadline.Is_Null then
            Item.Subscription_Deadline.Value := Util.Beans.Objects.Time.To_Time (Value);
         end if;
      elsif Name = "email" then
         Item.Email := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "login_name" then
         Item.Login_Name.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Login_Name.Is_Null then
            Item.Login_Name.Value := Util.Beans.Objects.To_Unbounded_String (Value);
         end if;
      elsif Name = "role" then
         Item.Role.Is_Null := Util.Beans.Objects.Is_Null (Value);
         if not Item.Role.Is_Null then
            Item.Role.Value := Util.Beans.Objects.To_Unbounded_String (Value);
         end if;
      end if;
   end Set_Value;


   --  --------------------
   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   --  --------------------
   procedure List (Object  : in out Member_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
   begin
      List (Object.List, Session, Context);
   end List;

   --  --------------------
   --  Describes the information about an Ada-France member.
   --  --------------------
   procedure List (Object  : in out Member_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
      procedure Read (Into : in out Member_Info);

      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Context);
      Pos  : Positive := 1;
      procedure Read (Into : in out Member_Info) is
      begin
         Into.Id := Stmt.Get_Identifier (0);
         Into.First_Name := Stmt.Get_Nullable_String (1);
         Into.Last_Name := Stmt.Get_Nullable_String (2);
         Into.Status := Status_Type'Enum_Val (Stmt.Get_Integer (3));
         Into.Ada_Europe := Stmt.Get_Nullable_Boolean (4);
         Into.Create_Date := Stmt.Get_Nullable_Time (5);
         Into.Payment_Date := Stmt.Get_Nullable_Time (6);
         Into.Subscription_Deadline := Stmt.Get_Nullable_Time (7);
         Into.Email := Stmt.Get_Unbounded_String (8);
         Into.Login_Name := Stmt.Get_Nullable_String (9);
         Into.Role := Stmt.Get_Nullable_String (10);
      end Read;
   begin
      Stmt.Execute;
      Member_Info_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         Object.Insert_Space (Before => Pos);
         Object.Update_Element (Index => Pos, Process => Read'Access);
         Pos := Pos + 1;
         Stmt.Next;
      end loop;
   end List;


   procedure Op_Save (Bean    : in out Member_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Save (Bean    : in out Member_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Member_Bean'Class (Bean).Save (Outcome);
   end Op_Save;
   package Binding_Member_Bean_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Member_Bean,
                                                      Method => Op_Save,
                                                      Name   => "save");
   procedure Op_Send (Bean    : in out Member_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Send (Bean    : in out Member_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Member_Bean'Class (Bean).Send (Outcome);
   end Op_Send;
   package Binding_Member_Bean_2 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Member_Bean,
                                                      Method => Op_Send,
                                                      Name   => "send");
   procedure Op_Register (Bean    : in out Member_Bean;
                          Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Register (Bean    : in out Member_Bean;
                          Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Member_Bean'Class (Bean).Register (Outcome);
   end Op_Register;
   package Binding_Member_Bean_3 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Member_Bean,
                                                      Method => Op_Register,
                                                      Name   => "register");
   procedure Op_Validate (Bean    : in out Member_Bean;
                          Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Validate (Bean    : in out Member_Bean;
                          Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Member_Bean'Class (Bean).Validate (Outcome);
   end Op_Validate;
   package Binding_Member_Bean_4 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Member_Bean,
                                                      Method => Op_Validate,
                                                      Name   => "validate");
   procedure Op_Load (Bean    : in out Member_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Load (Bean    : in out Member_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Member_Bean'Class (Bean).Load (Outcome);
   end Op_Load;
   package Binding_Member_Bean_5 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Member_Bean,
                                                      Method => Op_Load,
                                                      Name   => "load");
   procedure Op_Save_Payment (Bean    : in out Member_Bean;
                              Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Save_Payment (Bean    : in out Member_Bean;
                              Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Member_Bean'Class (Bean).Save_Payment (Outcome);
   end Op_Save_Payment;
   package Binding_Member_Bean_6 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Member_Bean,
                                                      Method => Op_Save_Payment,
                                                      Name   => "save_payment");
   procedure Op_Create (Bean    : in out Member_Bean;
                        Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Create (Bean    : in out Member_Bean;
                        Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Member_Bean'Class (Bean).Create (Outcome);
   end Op_Create;
   package Binding_Member_Bean_7 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Member_Bean,
                                                      Method => Op_Create,
                                                      Name   => "create");

   Binding_Member_Bean_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Member_Bean_1.Proxy'Access,
         2 => Binding_Member_Bean_2.Proxy'Access,
         3 => Binding_Member_Bean_3.Proxy'Access,
         4 => Binding_Member_Bean_4.Proxy'Access,
         5 => Binding_Member_Bean_5.Proxy'Access,
         6 => Binding_Member_Bean_6.Proxy'Access,
         7 => Binding_Member_Bean_7.Proxy'Access
     );

   --  ------------------------------
   --  This bean provides some methods that can be used in a Method_Expression.
   --  ------------------------------
   overriding
   function Get_Method_Bindings (From : in Member_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
      pragma Unreferenced (From);
   begin
      return Binding_Member_Bean_Array'Access;
   end Get_Method_Bindings;
   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Member_Bean;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "email" then
         return Util.Beans.Objects.To_Object (From.Email);
      elsif Name = "key" then
         return Util.Beans.Objects.To_Object (From.Key);
      end if;
      return Adafr.Members.Models.Member_Ref (From).Get_Value (Name);
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Member_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "email" then
         Item.Email := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "key" then
         Item.Key := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "first_name" then
         Item.Set_First_Name (Util.Beans.Objects.To_String (Value));
      elsif Name = "last_name" then
         Item.Set_Last_Name (Util.Beans.Objects.To_String (Value));
      elsif Name = "company" then
         Item.Set_Company (Util.Beans.Objects.To_String (Value));
      elsif Name = "address1" then
         Item.Set_Address1 (Util.Beans.Objects.To_String (Value));
      elsif Name = "address2" then
         Item.Set_Address2 (Util.Beans.Objects.To_String (Value));
      elsif Name = "address3" then
         Item.Set_Address3 (Util.Beans.Objects.To_String (Value));
      elsif Name = "postal_code" then
         Item.Set_Postal_Code (Util.Beans.Objects.To_String (Value));
      elsif Name = "city" then
         Item.Set_City (Util.Beans.Objects.To_String (Value));
      elsif Name = "country" then
         Item.Set_Country (Util.Beans.Objects.To_String (Value));
      elsif Name = "create_date" then
         Item.Set_Create_Date (Util.Beans.Objects.Time.To_Time (Value));
      elsif Name = "mail_verify_date" then
         if Util.Beans.Objects.Is_Null (Value) then
            Item.Set_Mail_Verify_Date (ADO.Nullable_Time '(Is_Null => True, others => <>));
         else
            Item.Set_Mail_Verify_Date (ADO.Nullable_Time '(Is_Null => False,
                                        Value   => Util.Beans.Objects.Time.To_Time (Value)));
         end if;
      elsif Name = "payment_date" then
         if Util.Beans.Objects.Is_Null (Value) then
            Item.Set_Payment_Date (ADO.Nullable_Time '(Is_Null => True, others => <>));
         else
            Item.Set_Payment_Date (ADO.Nullable_Time '(Is_Null => False,
                                        Value   => Util.Beans.Objects.Time.To_Time (Value)));
         end if;
      elsif Name = "status" then
         Item.Set_Status (Status_Type_Objects.To_Value (Value));
      elsif Name = "ada_europe" then
         Item.Set_Ada_Europe (Util.Beans.Objects.To_Boolean (Value));
      elsif Name = "salt" then
         Item.Set_Salt (Util.Beans.Objects.To_String (Value));
      elsif Name = "update_date" then
         Item.Set_Update_Date (Util.Beans.Objects.Time.To_Time (Value));
      elsif Name = "subscription_deadline" then
         if Util.Beans.Objects.Is_Null (Value) then
            Item.Set_Subscription_Deadline (ADO.Nullable_Time '(Is_Null => True, others => <>));
         else
            Item.Set_Subscription_Deadline (ADO.Nullable_Time '(Is_Null => False,
                                        Value   => Util.Beans.Objects.Time.To_Time (Value)));
         end if;
      elsif Name = "amount" then
         Item.Set_Amount (Util.Beans.Objects.To_Integer (Value));
      end if;
   end Set_Value;

   procedure Op_Load (Bean    : in out Member_List_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Load (Bean    : in out Member_List_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Member_List_Bean'Class (Bean).Load (Outcome);
   end Op_Load;
   package Binding_Member_List_Bean_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Member_List_Bean,
                                                      Method => Op_Load,
                                                      Name   => "load");

   Binding_Member_List_Bean_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Member_List_Bean_1.Proxy'Access
     );

   --  ------------------------------
   --  This bean provides some methods that can be used in a Method_Expression.
   --  ------------------------------
   overriding
   function Get_Method_Bindings (From : in Member_List_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
      pragma Unreferenced (From);
   begin
      return Binding_Member_List_Bean_Array'Access;
   end Get_Method_Bindings;
   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Member_List_Bean;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "page" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Page));
      elsif Name = "count" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Count));
      elsif Name = "filter" then
         return Filter_Type_Objects.To_Object (From.Filter);
      elsif Name = "page_size" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Page_Size));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Member_List_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "page" then
         Item.Page := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "count" then
         Item.Count := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "filter" then
         Item.Filter := Filter_Type_Objects.To_Value (Value);
      elsif Name = "page_size" then
         Item.Page_Size := Util.Beans.Objects.To_Integer (Value);
      end if;
   end Set_Value;


end Adafr.Members.Models;
